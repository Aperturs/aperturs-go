package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"apertursGin/graph/model"
	"apertursGin/service"
	"context"
	"fmt"
)

// ID is the resolver for the _id field.
func (r *accountResolver) ID(ctx context.Context, obj *model.Account) (string, error) {
	return obj.ID.Hex(), nil
}

// RegisterWithEmail is the resolver for the registerWithEmail field.
func (r *mutationResolver) RegisterWithEmail(ctx context.Context, input model.NewAccount) (*model.LoginResponse, error) {
	// panic(fmt.Errorf("not implemented: RegisterWithEmail - registerWithEmail"))
	return service.UserRegister(ctx,input)
}

// LoginWithEmail is the resolver for the loginWithEmail field.
func (r *mutationResolver) LoginWithEmail(ctx context.Context, email string, password string) (*model.LoginResponse, error) {
	return service.UserLogin(ctx,email,password)
}

// Account is the resolver for the account field.
func (r *queryResolver) Account(ctx context.Context, id string) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: Account - account"))
}

// Account returns AccountResolver implementation.
func (r *Resolver) Account() AccountResolver { return &accountResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type accountResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
